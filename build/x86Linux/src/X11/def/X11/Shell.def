(* X11/Shell.def  May 11  15:3:32  1996 *)
(* Copyright (c) 1996,1997 XDS Ltd, Russia. All rights reserved. *)

(* Converted using H2D v1.00 from X11/Shell.h. *)

(* $RCSfile: Shell.def,v $ $Revision: 6 $ $Date: 28.07.98 23:13 $ *)

<*+ M2ADDTYPES *>
<*+ M2EXTENSIONS *>
<*+ NOHEADER *>
<* IF NOT DEFINED(GENCTYPES) THEN *> <* NEW GENTYPEDEF+ *> <* END *>
<*+ CSTDLIB *>

DEFINITION MODULE ["C"] Shell;

IMPORT SYSTEM, Intrinsic;
(* H2D: to import this module write following text:
IMPORT Shell, Intrinsic;
*)

FROM Intrinsic IMPORT String, StringList;

(*  $XConsortium: Shell.h,v 1.34 95/05/10 15:09:48 kaleb Exp $  *)
(*  ***********************************************************  *)

(***********************************************************************
 *
 * Shell Widget
 *
 ***********************************************************************)

(* Shell-specific resources names, classes, and a representation type.
 *
 *  $XConsortium: makestrs.c,v 1.9 95/06/16 14:17:33 kaleb Exp $
 *  This file is automatically generated.
 *  Default ABI version -- Do not edit
 *  XConsortium: string.list,v 1.12 95/05/11 22:32:57 kaleb Exp
 *)

CONST
   XtNiconName='iconName';
   XtCIconName='IconName';
   XtNiconPixmap='iconPixmap';
   XtCIconPixmap='IconPixmap';
   XtNiconWindow='iconWindow';
   XtCIconWindow='IconWindow';
   XtNiconMask='iconMask';
   XtCIconMask='IconMask';
   XtNwindowGroup='windowGroup';
   XtCWindowGroup='WindowGroup';
   XtNvisual='visual';
   XtCVisual='Visual';
   XtNtitleEncoding='titleEncoding';
   XtCTitleEncoding='TitleEncoding';
   XtNsaveUnder='saveUnder';
   XtCSaveUnder='SaveUnder';
   XtNtransient='transient';
   XtCTransient='Transient';
   XtNoverrideRedirect='overrideRedirect';
   XtCOverrideRedirect='OverrideRedirect';
   XtNtransientFor='transientFor';
   XtCTransientFor='TransientFor';
   XtNiconNameEncoding='iconNameEncoding';
   XtCIconNameEncoding='IconNameEncoding';
   XtNallowShellResize='allowShellResize';
   XtCAllowShellResize='AllowShellResize';
   XtNcreatePopupChildProc='createPopupChildProc';
   XtCCreatePopupChildProc='CreatePopupChildProc';
   XtNtitle='title';
   XtCTitle='Title';
   XtRAtom='Atom';
   XtNargc='argc';
   XtCArgc='Argc';
   XtNargv='argv';
   XtCArgv='Argv';
   XtNiconX='iconX';
   XtCIconX='IconX';
   XtNiconY='iconY';
   XtCIconY='IconY';
   XtNinput='input';
   XtCInput='Input';
   XtNiconic='iconic';
   XtCIconic='Iconic';
   XtNinitialState='initialState';
   XtCInitialState='InitialState';
   XtNgeometry='geometry';
   XtCGeometry='Geometry';
   XtNbaseWidth='baseWidth';
   XtCBaseWidth='BaseWidth';
   XtNbaseHeight='baseHeight';
   XtCBaseHeight='BaseHeight';
   XtNwinGravity='winGravity';
   XtCWinGravity='WinGravity';
   XtNminWidth='minWidth';
   XtCMinWidth='MinWidth';
   XtNminHeight='minHeight';
   XtCMinHeight='MinHeight';
   XtNmaxWidth='maxWidth';
   XtCMaxWidth='MaxWidth';
   XtNmaxHeight='maxHeight';
   XtCMaxHeight='MaxHeight';
   XtNwidthInc='widthInc';
   XtCWidthInc='WidthInc';
   XtNheightInc='heightInc';
   XtCHeightInc='HeightInc';
   XtNminAspectY='minAspectY';
   XtCMinAspectY='MinAspectY';
   XtNmaxAspectY='maxAspectY';
   XtCMaxAspectY='MaxAspectY';
   XtNminAspectX='minAspectX';
   XtCMinAspectX='MinAspectX';
   XtNmaxAspectX='maxAspectX';
   XtCMaxAspectX='MaxAspectX';
   XtNwmTimeout='wmTimeout';
   XtCWmTimeout='WmTimeout';
   XtNwaitForWm='waitforwm';
   XtCWaitForWm='Waitforwm';
   XtNwaitforwm='waitforwm';
   XtCWaitforwm='Waitforwm';
   XtNclientLeader='clientLeader';
   XtCClientLeader='ClientLeader';
   XtNwindowRole='windowRole';
   XtCWindowRole='WindowRole';
   XtNurgency='urgency';
   XtCUrgency='Urgency';
   XtNcancelCallback='cancelCallback';
   XtNcloneCommand='cloneCommand';
   XtCCloneCommand='CloneCommand';
   XtNconnection='connection';
   XtCConnection='Connection';
   XtNcurrentDirectory='currentDirectory';
   XtCCurrentDirectory='CurrentDirectory';
   XtNdieCallback='dieCallback';
   XtNdiscardCommand='discardCommand';
   XtCDiscardCommand='DiscardCommand';
   XtNenvironment='environment';
   XtCEnvironment='Environment';
   XtNinteractCallback='interactCallback';
   XtNjoinSession='joinSession';
   XtCJoinSession='JoinSession';
   XtNprogramPath='programPath';
   XtCProgramPath='ProgramPath';
   XtNresignCommand='resignCommand';
   XtCResignCommand='ResignCommand';
   XtNrestartCommand='restartCommand';
   XtCRestartCommand='RestartCommand';
   XtNrestartStyle='restartStyle';
   XtCRestartStyle='RestartStyle';
   XtNsaveCallback='saveCallback';
   XtNsaveCompleteCallback='saveCompleteCallback';
   XtNsessionID='sessionID';
   XtCSessionID='SessionID';
   XtNshutdownCommand='shutdownCommand';
   XtCShutdownCommand='ShutdownCommand';
   XtNerrorCallback='errorCallback';

VAR 
  XtShellStrings: StringList;

(*  Class record constants  *)

TYPE
<* IF __GEN_C__ THEN *> <*- GENTYPEDEF *> <* END *>
  _ShellClassRec            = RECORD (* Declaration without definition *) END;
  _OverrideShellClassRec    = RECORD (* Declaration without definition *) END;
  _WMShellClassRec          = RECORD (* Declaration without definition *) END;
  _TransientShellClassRec   = RECORD (* Declaration without definition *) END;
  _TopLevelShellClassRec    = RECORD (* Declaration without definition *) END;
  _ApplicationShellClassRec = RECORD (* Declaration without definition *) END;
<* IF NOT X11R5 THEN *>
  _SessionShellClassRec     = RECORD (* Declaration without definition *) END;
<* END *>
<* IF __GEN_C__ THEN *> <*+ GENTYPEDEF *> <* END *>

  ShellWidgetClass            = POINTER TO _ShellClassRec;
  OverrideShellWidgetClass    = POINTER TO _OverrideShellClassRec;
  WMShellWidgetClass          = POINTER TO _WMShellClassRec;
  TransientShellWidgetClass   = POINTER TO _TransientShellClassRec;
  TopLevelShellWidgetClass    = POINTER TO _TopLevelShellClassRec;
  ApplicationShellWidgetClass = POINTER TO _ApplicationShellClassRec;
<* IF NOT X11R5 THEN *>
  SessionShellWidgetClass     = POINTER TO _SessionShellClassRec;
<* END *>

VAR 
  shellWidgetClass: Intrinsic.WidgetClass;
  overrideShellWidgetClass: Intrinsic.WidgetClass;
  wmShellWidgetClass: Intrinsic.WidgetClass;
  transientShellWidgetClass: Intrinsic.WidgetClass;
  topLevelShellWidgetClass: Intrinsic.WidgetClass;
  applicationShellWidgetClass: Intrinsic.WidgetClass;
<* IF NOT X11R5 THEN *>
  sessionShellWidgetClass: Intrinsic.WidgetClass;
<* END *>

END Shell.

(* X11/ShellP.def  May 23  2:12:42  1996 *)
(* Copyright (c) 1996,1997 XDS Ltd, Russia. All rights reserved. *)

(* Converted using H2D v1.00 from X11/ShellP.h. *)

(* $RCSfile: ShellP.def,v $ $Revision: 5 $ $Date: 28.07.98 23:13 $ *)

<*+ M2ADDTYPES *>
<*+ M2EXTENSIONS *>
<*+ NOHEADER *>
<* IF NOT DEFINED(GENCTYPES) THEN *> <* NEW GENTYPEDEF+ *> <* END *>
<*+ CSTDLIB *>
<*+ WOFF354 *>

(* Merged headers: X11/Shell.h, X11/Intrinsic.h, X11/VendorP.h, 
      	      	   X11/Vendor.h *)

DEFINITION MODULE ["C"] ShellP;

IMPORT SYSTEM, X, Xt:=IntrinsicP, Xlib, Xutil, Xrm:=Xresource, SMlib;
(* H2D: to import this module write following text:
IMPORT ShellP, X, IntrinsicP, Xlib, Xutil, Xresource, SMlib;
*)

(* $XConsortium: ShellP.h,v 1.41 94/04/17 20:14:50 converse Exp $
 ****************************************************************)

(*
 * ShellP.h - Private definitions for Shell widget
 *
 * Author:	Paul Asente
 * 		Digital Equipment Corporation
 * 		Western Software Laboratory
 * Date:	Thu Dec 3, 1987
 *)

(* --------------------------------------------------- *
 *                     X11/Shell.h                     *
 * --------------------------------------------------- *)

(* $XConsortium: Shell.ht,v 1.34 95/05/10 15:09:48 kaleb Exp $  *)

(**********************************************************************
 *
 * Shell Widget
 *
 **********************************************************************)

(* Shell-specific resources names, classes, and a representation type. *)

(* $XConsortium: makestrs.c,v 1.9 95/06/16 14:17:33 kaleb Exp $  *)
(* This file is automatically generated.  *)
(* Default ABI version -- Do not edit  *)
(* XConsortium: string.list,v 1.12 95/05/11 22:32:57 kaleb Exp  *)

CONST
   XtNiconName='iconName';
   XtCIconName='IconName';
   XtNiconPixmap='iconPixmap';
   XtCIconPixmap='IconPixmap';
   XtNiconWindow='iconWindow';
   XtCIconWindow='IconWindow';
   XtNiconMask='iconMask';
   XtCIconMask='IconMask';
   XtNwindowGroup='windowGroup';
   XtCWindowGroup='WindowGroup';
   XtNvisual='visual';
   XtCVisual='Visual';
   XtNtitleEncoding='titleEncoding';
   XtCTitleEncoding='TitleEncoding';
   XtNsaveUnder='saveUnder';
   XtCSaveUnder='SaveUnder';
   XtNtransient='transient';
   XtCTransient='Transient';
   XtNoverrideRedirect='overrideRedirect';
   XtCOverrideRedirect='OverrideRedirect';
   XtNtransientFor='transientFor';
   XtCTransientFor='TransientFor';
   XtNiconNameEncoding='iconNameEncoding';
   XtCIconNameEncoding='IconNameEncoding';
   XtNallowShellResize='allowShellResize';
   XtCAllowShellResize='AllowShellResize';
   XtNcreatePopupChildProc='createPopupChildProc';
   XtCCreatePopupChildProc='CreatePopupChildProc';
   XtNtitle='title';
   XtCTitle='Title';
   XtRAtom='Atom';
   XtNargc='argc';
   XtCArgc='Argc';
   XtNargv='argv';
   XtCArgv='Argv';
   XtNiconX='iconX';
   XtCIconX='IconX';
   XtNiconY='iconY';
   XtCIconY='IconY';
   XtNinput='input';
   XtCInput='Input';
   XtNiconic='iconic';
   XtCIconic='Iconic';
   XtNinitialState='initialState';
   XtCInitialState='InitialState';
   XtNgeometry='geometry';
   XtCGeometry='Geometry';
   XtNbaseWidth='baseWidth';
   XtCBaseWidth='BaseWidth';
   XtNbaseHeight='baseHeight';
   XtCBaseHeight='BaseHeight';
   XtNwinGravity='winGravity';
   XtCWinGravity='WinGravity';
   XtNminWidth='minWidth';
   XtCMinWidth='MinWidth';
   XtNminHeight='minHeight';
   XtCMinHeight='MinHeight';
   XtNmaxWidth='maxWidth';
   XtCMaxWidth='MaxWidth';
   XtNmaxHeight='maxHeight';
   XtCMaxHeight='MaxHeight';
   XtNwidthInc='widthInc';
   XtCWidthInc='WidthInc';
   XtNheightInc='heightInc';
   XtCHeightInc='HeightInc';
   XtNminAspectY='minAspectY';
   XtCMinAspectY='MinAspectY';
   XtNmaxAspectY='maxAspectY';
   XtCMaxAspectY='MaxAspectY';
   XtNminAspectX='minAspectX';
   XtCMinAspectX='MinAspectX';
   XtNmaxAspectX='maxAspectX';
   XtCMaxAspectX='MaxAspectX';
   XtNwmTimeout='wmTimeout';
   XtCWmTimeout='WmTimeout';
   XtNwaitForWm='waitforwm';
   XtCWaitForWm='Waitforwm';
   XtNwaitforwm='waitforwm';
   XtCWaitforwm='Waitforwm';
   XtNclientLeader='clientLeader';
   XtCClientLeader='ClientLeader';
   XtNwindowRole='windowRole';
   XtCWindowRole='WindowRole';
   XtNurgency='urgency';
   XtCUrgency='Urgency';
   XtNcancelCallback='cancelCallback';
   XtNcloneCommand='cloneCommand';
   XtCCloneCommand='CloneCommand';
   XtNconnection='connection';
   XtCConnection='Connection';
   XtNcurrentDirectory='currentDirectory';
   XtCCurrentDirectory='CurrentDirectory';
   XtNdieCallback='dieCallback';
   XtNdiscardCommand='discardCommand';
   XtCDiscardCommand='DiscardCommand';
   XtNenvironment='environment';
   XtCEnvironment='Environment';
   XtNinteractCallback='interactCallback';
   XtNjoinSession='joinSession';
   XtCJoinSession='JoinSession';
   XtNprogramPath='programPath';
   XtCProgramPath='ProgramPath';
   XtNresignCommand='resignCommand';
   XtCResignCommand='ResignCommand';
   XtNrestartCommand='restartCommand';
   XtCRestartCommand='RestartCommand';
   XtNrestartStyle='restartStyle';
   XtCRestartStyle='RestartStyle';
   XtNsaveCallback='saveCallback';
   XtNsaveCompleteCallback='saveCompleteCallback';
   XtNsessionID='sessionID';
   XtCSessionID='SessionID';
   XtNshutdownCommand='shutdownCommand';
   XtCShutdownCommand='ShutdownCommand';
   XtNerrorCallback='errorCallback';

VAR 
  XtShellStrings: Xt.StringList;

(* Class record constants  *)

TYPE 
  ShellWidgetClass            = POINTER TO _ShellClassRec;
  OverrideShellWidgetClass    = POINTER TO _OverrideShellClassRec;
  WMShellWidgetClass          = POINTER TO _WMShellClassRec;
  TransientShellWidgetClass   = POINTER TO _TransientShellClassRec;
  TopLevelShellWidgetClass    = POINTER TO _TopLevelShellClassRec;
  ApplicationShellWidgetClass = POINTER TO _ApplicationShellClassRec;
  SessionShellWidgetClass     = POINTER TO _SessionShellClassRec;

VAR 
  shellWidgetClass: Xt.WidgetClass;
  overrideShellWidgetClass: Xt.WidgetClass;
  wmShellWidgetClass: Xt.WidgetClass;
  transientShellWidgetClass: Xt.WidgetClass;
  topLevelShellWidgetClass: Xt.WidgetClass;
  applicationShellWidgetClass: Xt.WidgetClass;
  sessionShellWidgetClass: Xt.WidgetClass;

(* ---------------------------------------------------- *)
(*                     X11/ShellP.h                     *)
(* ---------------------------------------------------- *)

(* *****
 * ***** VendorP.h is included later on; it needs fields defined in the first
 * ***** part of this header file
 * *****
 *)

(**********************************************************************
 *
 * Shell Widget Private Data
 *
 **********************************************************************)

(* New fields for the Shell widget class record  *)

TYPE 
  ShellClassPart = RECORD
    extension: Xt.XtPointer;   (* pointer to extension record  *)
  END;

  ShellClassExtensionRec = RECORD
    next_extension: Xt.XtPointer; (* 1st 4 mandated for all extension records*)
    record_type   : Xrm.XrmQuark; (* NULLQUARK; on ShellClassPart *)
    version       : LONGINT;      (* must be XtShellExtensionVersion *)
    record_size   : Xt.Cardinal;  (* sizeof(ShellClassExtensionRec) *)
    root_geometry_manager: Xt.XtGeometryHandler;
  END;

  ShellClassExtension = POINTER TO ShellClassExtensionRec;

CONST 
  XtShellExtensionVersion = 1;

VAR
  XtInheritRootGeometryManager -: Xt.XtGeometryHandler;

TYPE 
<* IF __GEN_C__ THEN *> <*- GENTYPEDEF *> <* END *>
  _ShellClassRec = RECORD
    core_class     : Xt.CoreClassPart;
    composite_class: Xt.CompositeClassPart;
    shell_class    : ShellClassPart;
  END;
<* IF __GEN_C__ THEN *> <*+ GENTYPEDEF *> <* END *>

  ShellClassRec = _ShellClassRec;

VAR 
  shellClassRec: ShellClassRec;

(* New fields for the shell widget  *)

(* CONST -- Should be OK, but error expression out of bound - probably BUG
  _XtShellPositionValid  = VAL (Xt.Boolean, 1);
  _XtShellNotReparented  = VAL (Xt.Boolean, 2);
  _XtShellPPositionOK    = VAL (Xt.Boolean, 4);
  _XtShellGeometryParsed = VAL (Xt.Boolean, 8);
 *)
  _XtShellPositionValid  -: Xt.Boolean;
  _XtShellNotReparented  -: Xt.Boolean;
  _XtShellPPositionOK    -: Xt.Boolean;
  _XtShellGeometryParsed -: Xt.Boolean;

TYPE
  ShellPart = RECORD
    geometry               : Xt.String;
    create_popup_child_proc: Xt.XtCreatePopupChildProc;
    grab_kind              : Xt.XtGrabKind;
    spring_loaded          : Xt.Boolean;
    popped_up              : Xt.Boolean;
    allow_shell_resize     : Xt.Boolean;
    client_specified       : Xt.Boolean;   (* re-using old name  *)
    save_under             : Xt.Boolean;
    override_redirect      : Xt.Boolean;
    popup_callback         : Xt.XtCallbackList;
    popdown_callback       : Xt.XtCallbackList;
    visual                 : Xlib.PtrVisual;
  END;

  ShellRec = RECORD
    core     : Xt.CorePart;
    composite: Xt.CompositePart;
    shell    : ShellPart;
  END;

  ShellWidget = POINTER TO ShellRec;

(**********************************************************************
 *
 * OverrideShell Widget Private Data
 *
 **********************************************************************)

(* New fields for the OverrideShell widget class record  *)
  OverrideShellClassPart = RECORD
    extension: Xt.XtPointer;   (* pointer to extension record  *)
  END;

<* IF __GEN_C__ THEN *> <*- GENTYPEDEF *> <* END *>
  _OverrideShellClassRec = RECORD
    core_class          : Xt.CoreClassPart;
    composite_class     : Xt.CompositeClassPart;
    shell_class         : ShellClassPart;
    override_shell_class: OverrideShellClassPart;
  END;
<* IF __GEN_C__ THEN *> <*+ GENTYPEDEF *> <* END *>

  OverrideShellClassRec = _OverrideShellClassRec;

VAR 
  overrideShellClassRec: OverrideShellClassRec;

(* No new fields for the override shell widget  *)

TYPE 
  OverrideShellPart = RECORD
    frabjous: SYSTEM.int;
  END;

  OverrideShellRec = RECORD
    core     : Xt.CorePart;
    composite: Xt.CompositePart;
    shell    : ShellPart;
    override : OverrideShellPart;
  END;

  OverrideShellWidget = POINTER TO OverrideShellRec;

(**********************************************************************
 *
 * WMShell Widget Private Data
 *
 **********************************************************************)

(* New fields for the WMShell widget class record  *)
  WMShellClassPart = RECORD
    extension: Xt.XtPointer;   (* pointer to extension record  *)
  END;

<* IF __GEN_C__ THEN *> <*- GENTYPEDEF *> <* END *>
  _WMShellClassRec = RECORD
    core_class     : Xt.CoreClassPart;
    composite_class: Xt.CompositeClassPart;
    shell_class    : ShellClassPart;
    wm_shell_class : WMShellClassPart;
  END;
<* IF __GEN_C__ THEN *> <*+ GENTYPEDEF *> <* END *>

  WMShellClassRec = _WMShellClassRec;

VAR 
  wmShellClassRec: WMShellClassRec;

(* New fields for the WM shell widget  *)

TYPE 
<* IF __GEN_C__ THEN *> <*- GENTYPEDEF *> <* END *>
  _XAspectStruct = RECORD
    x: SYSTEM.int;
    y: SYSTEM.int;
  END;

  _OldXSizeHints = RECORD
    (* pre-R4 Xlib structure  *)
    flags     : LONGINT;
    x         : SYSTEM.int;
    y         : SYSTEM.int;
    width     : SYSTEM.int;
    height    : SYSTEM.int;
    min_width : SYSTEM.int;
    min_height: SYSTEM.int;
    max_width : SYSTEM.int;
    max_height: SYSTEM.int;
    width_inc : SYSTEM.int;
    height_inc: SYSTEM.int;
    min_aspect: _XAspectStruct;
    max_aspect: _XAspectStruct;
  END;
<* IF __GEN_C__ THEN *> <*+ GENTYPEDEF *> <* END *>

  WMShellPart = RECORD
    title         : Xt.String;
    wm_timeout    : SYSTEM.int;
    wait_for_wm   : Xt.Boolean;
    transient     : Xt.Boolean;
    urgency       : Xt.Boolean;
    client_leader : Xt.Widget;
    window_role   : Xt.String;
    size_hints    : _OldXSizeHints;
    wm_hints      : Xutil.XWMHints;
    base_width    : SYSTEM.int;
    base_height   : SYSTEM.int;
    win_gravity   : SYSTEM.int;
    title_encoding: X.Atom;
  END;

  WMShellRec = RECORD
    core     : Xt.CorePart;
    composite: Xt.CompositePart;
    shell    : ShellPart;
    wm       : WMShellPart;
  END;

  WMShellWidget = POINTER TO WMShellRec;

(* ----------------------------------------------------- *)
(*                    X11/VendorP.h                     *)
(* ----------------------------------------------------- *)

(*
 * $XConsortium: VendorP.h,v 1.21 94/04/17 20:15:05 swick Exp $
 * $oHeader: VendorP.h,v 1.2 88/08/18 15:56:48 asente Exp $
 *)


(*
 * VendorP.h - Private definitions for VendorShell widget
 *
 * Author:	Paul Asente
 * 		Digital Equipment Corporation 
 * 		Western Software Laboratory
 * Date:	Thu Dec 3, 1987
 *)

(**********************************************************************
 *
 * VendorShell Widget Private Data
 *
 **********************************************************************)

(* ---------------------------------------------------- *)
(*                     X11/Vendor.h                     *)
(* ---------------------------------------------------- *)

(*
 * $XConsortium: Vendor.h,v 1.13 94/04/17 20:15:04 jim Exp $
 * $oHeader: Vendor.h,v 1.2 88/08/18 15:56:44 asente Exp $
 *)

(**********************************************************************
 *
 * VendorShell Widget
 *
 **********************************************************************)

(* Class record constants  *)
  VendorShellWidgetClass = POINTER TO _VendorShellClassRec;

VAR 
  vendorShellWidgetClass: Xt.WidgetClass;

(* ----------------------------------------------------- *)
(*                     X11/VendorP.h                     *)
(* ----------------------------------------------------- *)

(* New fields for the VendorShell widget class record  *)

TYPE 
  VendorShellClassPart = RECORD
    extension: Xt.XtPointer;   (* pointer to extension record  *)
  END;

<* IF __GEN_C__ THEN *> <*- GENTYPEDEF *> <* END *>
  _VendorShellClassRec = RECORD
    core_class        : Xt.CoreClassPart;
    composite_class   : Xt.CompositeClassPart;
    shell_class       : ShellClassPart;
    wm_shell_class    : WMShellClassPart;
    vendor_shell_class: VendorShellClassPart;
  END;
<* IF __GEN_C__ THEN *> <*+ GENTYPEDEF *> <* END *>

  VendorShellClassRec = _VendorShellClassRec;

VAR 
  vendorShellClassRec: VendorShellClassRec;

(* New fields for the vendor shell widget.  *)


TYPE 
  VendorShellPart = RECORD
    vendor_specific: SYSTEM.int;
  END;

  VendorShellRec = RECORD
    core     : Xt.CorePart;
    composite: Xt.CompositePart;
    shell    : ShellPart;
    wm       : WMShellPart;
    vendor   : VendorShellPart;
  END;

  VendorShellWidget = POINTER TO VendorShellRec;

(* ---------------------------------------------------- *)
(*                     X11/ShellP.h                     *)
(* ---------------------------------------------------- *)

(**********************************************************************
 *
 * TransientShell Widget Private Data
 *
 **********************************************************************)

(* New fields for the TransientShell widget class record  *)

  TransientShellClassPart = RECORD
    extension: Xt.XtPointer;   (* pointer to extension record  *)
  END;

<* IF __GEN_C__ THEN *> <*- GENTYPEDEF *> <* END *>
  _TransientShellClassRec = RECORD
    core_class           : Xt.CoreClassPart;
    composite_class      : Xt.CompositeClassPart;
    shell_class          : ShellClassPart;
    wm_shell_class       : WMShellClassPart;
    vendor_shell_class   : VendorShellClassPart;
    transient_shell_class: TransientShellClassPart;
  END;
<* IF __GEN_C__ THEN *> <*+ GENTYPEDEF *> <* END *>

  TransientShellClassRec = _TransientShellClassRec;

VAR 
  transientShellClassRec: TransientShellClassRec;

(* New fields for the transient shell widget  *)

TYPE 
  TransientShellPart = RECORD
    transient_for: Xt.Widget;
  END;

  TransientShellRec = RECORD
    core     : Xt.CorePart;
    composite: Xt.CompositePart;
    shell    : ShellPart;
    wm       : WMShellPart;
    vendor   : VendorShellPart;
    transient: TransientShellPart;
  END;

  TransientShellWidget = POINTER TO TransientShellRec;

(**********************************************************************
 *
 * TopLevelShell Widget Private Data
 *
 **********************************************************************)

(* New fields for the TopLevelShell widget class record  *)

  TopLevelShellClassPart = RECORD
    extension: Xt.XtPointer;   (* pointer to extension record  *)
  END;

<* IF __GEN_C__ THEN *> <*- GENTYPEDEF *> <* END *>
  _TopLevelShellClassRec = RECORD
    core_class           : Xt.CoreClassPart;
    composite_class      : Xt.CompositeClassPart;
    shell_class          : ShellClassPart;
    wm_shell_class       : WMShellClassPart;
    vendor_shell_class   : VendorShellClassPart;
    top_level_shell_class: TopLevelShellClassPart;
  END;
<* IF __GEN_C__ THEN *> <*+ GENTYPEDEF *> <* END *>

TopLevelShellClassRec = _TopLevelShellClassRec;

VAR 
  topLevelShellClassRec: TopLevelShellClassRec;

(* New fields for the top level shell widget  *)

TYPE 
  TopLevelShellPart = RECORD
    icon_name         : Xt.String;
    iconic            : Xt.Boolean;
    icon_name_encoding: X.Atom;
  END;

  TopLevelShellRec = RECORD
    core     : Xt.CorePart;
    composite: Xt.CompositePart;
    shell    : ShellPart;
    wm       : WMShellPart;
    vendor   : VendorShellPart;
    topLevel : TopLevelShellPart;
  END;

  TopLevelShellWidget = POINTER TO TopLevelShellRec;

(**********************************************************************
 *
 * ApplicationShell Widget Private Data
 *
 **********************************************************************)

(* New fields for the ApplicationShell widget class record  *)


  ApplicationShellClassPart = RECORD
    extension: Xt.XtPointer;     (* pointer to extension record  *)
  END;

<* IF __GEN_C__ THEN *> <*- GENTYPEDEF *> <* END *>
  _ApplicationShellClassRec = RECORD
    core_class             : Xt.CoreClassPart;
    composite_class        : Xt.CompositeClassPart;
    shell_class            : ShellClassPart;
    wm_shell_class         : WMShellClassPart;
    vendor_shell_class     : VendorShellClassPart;
    top_level_shell_class  : TopLevelShellClassPart;
    application_shell_class: ApplicationShellClassPart;
  END;
<* IF __GEN_C__ THEN *> <*+ GENTYPEDEF *> <* END *>

  ApplicationShellClassRec = _ApplicationShellClassRec;

VAR 
  applicationShellClassRec: ApplicationShellClassRec;

(* New fields for the application shell widget  *)

TYPE

  ApplicationShellPart = RECORD
    class    : Xt.String;
    xrm_class: Xrm.XrmClass;
    argc     : SYSTEM.int;
    argv     : Xt.StringList;
  END;

  ApplicationShellRec = RECORD
    core       : Xt.CorePart;
    composite  : Xt.CompositePart;
    shell      : ShellPart;
    wm         : WMShellPart;
    vendor     : VendorShellPart;
    topLevel   : TopLevelShellPart;
    application: ApplicationShellPart;
  END;

  ApplicationShellWidget = POINTER TO ApplicationShellRec;

(**********************************************************************
 *
 * SessionShell Widget Private Data
 *
 **********************************************************************)

<* IF NOT X11R5 THEN *> -- SessionShellClass is a X11 Release 6 specific widget

(* New fields for the SessionShell widget class record  *)

  SessionShellClassPart = RECORD
    extension: Xt.XtPointer;   (* pointer to extension record  *)
  END;

<* IF __GEN_C__ THEN *> <*- GENTYPEDEF *> <* END *>
  _SessionShellClassRec = RECORD
    core_class             : Xt.CoreClassPart;
    composite_class        : Xt.CompositeClassPart;
    shell_class            : ShellClassPart;
    wm_shell_class         : WMShellClassPart;
    vendor_shell_class     : VendorShellClassPart;
    top_level_shell_class  : TopLevelShellClassPart;
    application_shell_class: ApplicationShellClassPart;
    session_shell_class    : SessionShellClassPart;
  END;
<* IF __GEN_C__ THEN *> <*+ GENTYPEDEF *> <* END *>

  SessionShellClassRec = _SessionShellClassRec;

VAR 
  sessionShellClassRec: SessionShellClassRec;

TYPE 
<* IF __GEN_C__ THEN *> <*- GENTYPEDEF *> <* END *>
  _XtSaveYourselfRec = RECORD (* Declaration without definition *) END;
<* IF __GEN_C__ THEN *> <*- GENTYPEDEF *> <* END *>

  XtSaveYourself = POINTER TO _XtSaveYourselfRec;  (* implementation-private *)

(* New fields for the session shell widget  *)

  SessionShellPart = RECORD
    connection             : SMlib.SmcConn;
    session_id             : Xt.String;
    restart_command        : Xt.StringList;
    clone_command          : Xt.StringList;
    discard_command        : Xt.StringList;
    resign_command         : Xt.StringList;
    shutdown_command       : Xt.StringList;
    environment            : Xt.StringList;
    current_dir            : Xt.String;
    program_path           : Xt.String;
    restart_style          : SHORTCARD;
    checkpoint_state       : SHORTCARD;
    join_session           : Xt.Boolean;
    save_callbacks         : Xt.XtCallbackList;
    interact_callbacks     : Xt.XtCallbackList;
    cancel_callbacks       : Xt.XtCallbackList;
    save_complete_callbacks: Xt.XtCallbackList;
    die_callbacks          : Xt.XtCallbackList;
    error_callbacks        : Xt.XtCallbackList;
    save                   : XtSaveYourself;
    input_id               : Xt.XtInputId;
    ses20                  : Xt.XtPointer;
    ses19                  : Xt.XtPointer;
    ses18                  : Xt.XtPointer;
    ses17                  : Xt.XtPointer;
    ses16                  : Xt.XtPointer;
    ses15                  : Xt.XtPointer;
    ses14                  : Xt.XtPointer;
    ses13                  : Xt.XtPointer;
    ses12                  : Xt.XtPointer;
    ses11                  : Xt.XtPointer;
    ses10                  : Xt.XtPointer;
    ses9                   : Xt.XtPointer;
    ses8                   : Xt.XtPointer;
    ses7                   : Xt.XtPointer;
    ses6                   : Xt.XtPointer;
    ses5                   : Xt.XtPointer;
    ses4                   : Xt.XtPointer;
    ses3                   : Xt.XtPointer;
    ses2                   : Xt.XtPointer;
    ses1                   : Xt.XtPointer;
  END;

  SessionShellRec = RECORD
    core       : Xt.CorePart;
    composite  : Xt.CompositePart;
    shell      : ShellPart;
    wm         : WMShellPart;
    vendor     : VendorShellPart;
    topLevel   : TopLevelShellPart;
    application: ApplicationShellPart;
    session    : SessionShellPart;
  END;

  SessionShellWidget = POINTER TO SessionShellRec;

<* END *> -- X11R5

END ShellP.

(** Copyright (c) 1996 xTech Ltd, Russia. All Rights Reserved. *)
(** C back-end: common declarations, options *)
MODULE ccK;

(* Modifications:
   27/Mar/98 Vit  5.00 ÿSpeedup char tables placed here
                        New options
   (XDS versions below, BE - above)
   27/Mar/96 Ned  2.12  back-end version 4.14
   24/Mar/96 Ned  2.12  back-end version 4.13
*)


IMPORT
     pc := pcK
  , env := xiEnv
  ;

IMPORT SYSTEM;

CONST
  (* sets of language flags *)
  SPEC_PROCLASS* = pc.LangSet{pc.flag_p,
                              pc.flag_stdcall,
                              pc.flag_syscall};
  DFLT_PROCLASS* = pc.LangSet{pc.flag_o2,
                              pc.flag_m2};
  C_LIKE_FLAGS * = pc.LangSet{pc.flag_c,
                              pc.flag_p,
                              pc.flag_stdcall,
                              pc.flag_syscall};

CONST (* tags: valid BE range 8..15 *)
  (* object tags *)
  otag_declared*   =VAL(pc.OTAG, 8); -- declared, may be not defined
  otag_declaring*  =VAL(pc.OTAG, 9); -- declaration in progress
  otag_defining*   =VAL(pc.OTAG,10); -- definition in progress
  otag_pub_defined*=VAL(pc.OTAG,11); -- public part is defined
  otag_pri_defined*=VAL(pc.OTAG,12); -- private part is def. (func.body, td)
  otag_versionkey* =VAL(pc.OTAG,13); -- version key in module body name
  otag_notype*     =VAL(pc.OTAG,13); -- object declared with wrong type (recovery purpose)
  otag_headerfile* =VAL(pc.OTAG,14); -- header file exist, may be extern
  otag_bitfield*   =VAL(pc.OTAG,14); -- bit filed, has "&" operator for SL1
  otag_bitfield_nm*=VAL(pc.OTAG,15); -- bit field with additional name
  otag_reference*  =VAL(pc.OTAG,15); -- obj. name is reference to object

  (* type tags *)
  ttag_ownheader*  =VAL(pc.TTAG, 8); -- header file was made by this back-end
  ttag_nocode*     =VAL(pc.TTAG, 9); -- C text of module is not generated by this back-end
  ttag_cstdlib*    =VAL(pc.TTAG,10); -- CSTDLIB was set while compile the module
  ttag_union*      =VAL(pc.TTAG,11); -- record is union, not struct
  ttag_typedef*    =VAL(pc.TTAG,16); -- gen typedefs for enum/struct/union

VAR
-- options
  op_index16   *: BOOLEAN; -- INDEX16
  op_address16 *: BOOLEAN; -- DIFADR16
  op_int16     *: BOOLEAN; -- TARGET16
  op_gensize   *: BOOLEAN; -- GENSIZE  -- use std type sizes(+) or keep unknown(-)
                                           (* const calculations fail if -! *)
  op_debug     *: BOOLEAN; -- GENDEBUG
  op_profile   *: BOOLEAN; -- GENPROFILE
  op_lineno    *: BOOLEAN; -- LINENO
  op_cdiv      *: BOOLEAN; -- GENCDIV
  op_comments  *: BOOLEAN; -- COMMENT
  op_krc       *: BOOLEAN; -- GENKRC
  op_cpp       *: BOOLEAN; -- GENCPP
  op_proclass  *: BOOLEAN; -- GENPROCLASS
  op_gendll    *: BOOLEAN; -- GENDLL
  op_constenum *: BOOLEAN; -- GENCONSTENUM
  op_cppconst  *: BOOLEAN; -- GENCPPCONST  -- CPP: consts -> #define(-)/const(+)
  op_intsuffix *: BOOLEAN; -- GENINTSUFFIX -- gen type suffices to numbers (+)
  op_noinit    *: BOOLEAN; -- GENNOINIT
  op_noextern  *: BOOLEAN; -- NOEXTERN
  op_noinclude *: BOOLEAN; -- NOEINCLUDE
  op_ptrtoarr  *: BOOLEAN; -- GENPTRTOARR
  op_uniqnames *: BOOLEAN; -- GENUNIQUENAMES -- qualify globals with modules (+)
  op_unicode   *: BOOLEAN; -- GENUNICODE
  op_snglstat  *: BOOLEAN; -- GENSINGLESTAT -- leave single statement per line

  op_nocode    *: BOOLEAN; -- NOCODE - general XDS
  op_noheader  *: BOOLEAN; -- NOHEADER - general XDS
  op_cstdlib   *: BOOLEAN; -- CSTDLIB - general XDS

VAR
  vers *: ARRAY 16 OF CHAR; -- back-end version

-----------------------------------------------------------------------------

PROCEDURE ini*;
(*
*)
BEGIN
  op_index16   := env.config.Option ("INDEX16");
  op_address16 := env.config.Option ("DIFADR16");
  op_int16     := env.config.Option ("TARGET16");
  op_gensize   := env.config.Option ("GENSIZE");
  op_profile   := env.config.Option ("GENPROFILE");
  op_debug     := env.config.Option ("GENDEBUG")
               OR op_profile;
  op_lineno    := env.config.Option ("LINENO");
  op_cdiv      := env.config.Option ("GENCDIV");
  op_comments  := env.config.Option ("COMMENT");
  op_cpp       := env.config.Option ("GENCPP");
  op_krc       := ~op_cpp
                & env.config.Option ("GENKRC");
  op_proclass  := env.config.Option ("GENPROCLASS");
  op_gendll    := env.config.Option ("GENDLL");
  op_intsuffix := env.config.Option ("GENINTSUFFIX");
  op_noinit    := env.config.Option ("GENNOINIT");
  op_noextern  := env.config.Option ("NOEXTERN");
  op_noinclude := env.config.Option ("NOINCLUDE");
  op_ptrtoarr  := env.config.Option ("GENPTRTOARR");
  op_nocode    := env.config.Option ("NOCODE");         -- general XDS option
  op_noheader  := env.config.Option ("NOHEADER");       -- general XDS option
  op_cstdlib   := env.config.Option ("CSTDLIB");        -- general XDS option
  op_uniqnames := env.config.Option ("GENUNIQUENAMES");
  op_cppconst  := op_cpp
                & env.config.Option ("GENCPPCONST");
  op_constenum := env.config.Option ("GENCONSTENUM");
  op_unicode   := env.config.Option ("GENUNICODE");
  op_snglstat  := env.config.Option ("GENSINGLESTAT");
END ini;

-----------------------------------------------------------------------------

PROCEDURE exi*;
BEGIN
END exi;


-----------------------------------------------------------------------------

PROCEDURE DeclareOptions*;
(*
*)
  -------------------------------------------------

  PROCEDURE options ( s-: ARRAY OF CHAR );
  (*
  *)
  VAR
    i,n : INTEGER;
    name: ARRAY 16 OF CHAR;
  BEGIN
    i := 0;
    REPEAT
      n := 0;
      WHILE (s[i] # ';') & (s[i] # '+') DO
        name[n] := s[i];
        INC (n);
        INC (i)
      END;
      name[n] := 0X;
      env.config.NewOption (name, s[i] = '+', SYSTEM.VAL(env.CompilerOption,-1));
      INC (i)
    UNTIL s[i] = 0X;
  END options;

 -------------------------------------------------

  CONST opts = "NOEXTERN;"
             + "NOINCLUDE;"
             + "INDEX16;"
             + "CONVHDRNAME;"
             + "VERSIONKEY;"
	     + "GENTYPEDEF;"
             + "DIFADR16;"
             + "GENSIZE;"
             + "GENCTYPES;"
             + "GENKRC;"
             + "TARGET16;"
             + "GENDEBUG;"
             + "LINENO;"
             + "GENFULLFNAME;"
             + "GENCDIV;"
	     + "GENPROCLASS+"
             + "GENCPP;"
             + "NOOPTIMIZE;"
             + "GENPROFILE;"
             + "GENDATE+"
             + "GENDLL;"
             + "GENCONSTENUM;"
             + "GENINTSUFFIX;"
             + "GENPTRTOARR;"
             + "GENNOINIT;"
             + "GENUNIQUENAMES+"
             + "GENCPPCONST;"
             + "GENUNICODE;"
             + "GENSINGLESTAT+"
             + "C_TRACE;"
             + "C_VIS;";

BEGIN
  env.config.NewOption   ("GENTYPEDEF", FALSE, env.no_struct); -- tag adds to every type
  env.config.NewEquation ("COPYRIGHT");
  env.config.NewEquation ("GENIDLEN");
  env.config.SetEquation ("GENIDLEN", "30");
  env.config.NewEquation ("GENWIDTH");
  env.config.SetEquation ("GENWIDTH", "77");
  env.config.NewEquation ("GENINDENT");
  env.config.SetEquation ("GENINDENT", "3");
  options (opts);
END DeclareOptions;

(*--------------------------------------------------------------
                declaration     public def.     private def.

ob_proc         profile         -               body
ob_xproc        profile         -               body
ob_cproc        profile         -               body
ob_cproc        profile         -               -
ob_type
  rename        typedef         -               -
  ty_record     struct X        struct X { }    type descriptor
  ty_array_of   struct X        struct X { }    -
  other         typedef         -               -
ob_module       profile         -               body, descriptor

-----------------------------------------------------------------*)

VAR (* Speed-up tables for char processing *)
  IsLetDig*: ARRAY 256 OF BOOLEAN;   -- letter | digit | _ predicate

  i: INTEGER;
  c: CHAR;

BEGIN
  FOR i := 0 TO 0FFH DO         -- Initialize charwise speed-up tables
    c := CHR (i);
    IsLetDig[i] := (c >= '0') & (c <= '9') OR
                   (c >= 'A') & (c <= 'Z') OR
	           (c >= 'a') & (c <= 'z') OR
	           (c = '_');
  END;

  vers := "ANSI C/C++ 5.20";
END ccK.
